{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-0c47176e8b63883b",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# Final Project\n",
    "\n",
    "For the final project, your task is to predict the type of galaxies based on some somewhat noisy observations of the galaxies.  Galaxies come in a whole range of \"types\", but we will simplify down into just 4 types, numbered 1,2,3,4.  (See below for details about what the numbers mean, but you don't really need to understand that for this project.)\n",
    "\n",
    "The observations of the galaxies come from the Sloan Digital Sky Suvey (SDSS), and include some measurements by the scientists working on that survey based on the images.  At first, we will focus only on the measured values based on the images.  We call this \"catalog\" data.\n",
    "\n",
    "The catalog includes a number of measurements and calculations about the images of the galaxies.\n",
    "These data are fully described in [Fischer et al (2019)](https://arxiv.org/abs/1811.02580), a recent paper by several U. Penn researchers.\n",
    "Don't worry.  You don't need to read that paper to do this project.  But if you feel inspired to read more about it, please do take a look at the paper.  [This site](https://lco.global/spacebook/galaxies/galaxy-classification/) also has a good student-level disussion of galaxy typing.\n",
    "\n",
    "The Fischer et al paper describes quite a lot of measurements based on different kinds of fits to the images.  We have extracted a subset of the measurements into a smaller catalog, which should be easier for you to work with.  Specifically, we selected columns related to the bulge + disk decomposition of the galaxy (called SE for Sersic + Exponential in the paper).\n",
    "\n",
    "The columns in this catalog are:\n",
    "\n",
    "* id = A numeric ID identifying the galaxy\n",
    "* gal_type = Which type of galaxy this is.  We discuss this more below.\n",
    "* ra = Right Ascension in degrees.  Kind of like longitude on the sky.\n",
    "* dec = Declination in degrees.  Like latitude on the sky.\n",
    "* redshift = A measure of how far away the galaxy is.\n",
    "* log_luminosity = Base 10 logarithm of the galaxy's brightness (aka luminosity) measured as a multiple of the sun's luminosity.\n",
    "* color = Lr / Lg, the ratio of the luminosity at red wavelengths to the luminosity at green wavelengths.\n",
    "* radius = The half-light radius of the galaxy (called Re in Helena's slides) according to the bulge + disk fit in kiloparsecs (kpc; see below for definition of kpc).\n",
    "* b_over_a = The ratio of the semi-minor axis of the galaxy (b) to the semi-major axis (a).  b_over_a = 1 is a circle. b_over_a close to 0 is a very elongated ellipse.\n",
    "* pos_angle = The position angle of the semi-minor axis of the galaxy on the sky in degrees.\n",
    "* bulge_fract = The fraction of the total light that was found to be in the bulge component (called B/T in Helena's slides).\n",
    "* sersic_n = The Sersic index of the bulge component of the fit.\n",
    "* r_bulge = The half-light radius of the bulge component of the fit in kiloparsecs (kpc).\n",
    "* r_disk = The half-light radius of the disk component of the fit in kiloparsecs (kpc).\n",
    "\n",
    "Radii are given in kpc above, a common distance unit used by astronomers. For reference, 1 kpc = 1000 pc, and 1 pc = 3.26 light years.\n",
    "\n",
    "--- \n",
    "\n",
    "The gal_type column is your target (Y).  The others you may use as your predictors (X_i).\n",
    "\n",
    "For the galaxy type, we distilled the morphological classification described in Fischer et al into 4 broad categories.\n",
    "\n",
    "* gal_type = 1 are elliptical galaxies.  In the paper, these are called E.  They have TTYPE <= 0 and P_S0 <= 0.5.\n",
    "* gal_type = 2 are lenticular galaxies.  In the paper, these are called S0.  They have TTYPE <= 0 and P_S0 > 0.5.\n",
    "* gal_type = 3 are tight spiral galaxies.  In the paper, these are described as 0 < TType < 3.  We will call them S1.\n",
    "* gal_type = 4 are loose spiral galaxies.  In the paper, these are described as TType > 3.  We will call them S2."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-a0e2a1b569c37467",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "### Part 1\n",
    "\n",
    "Here, you can use any of the various machine-learning classifiers we learned about prior to neural nets (that's part 2).  This could include AdaBoost, RandomForest, LogisticRegression, or even scikit classifiers that we didn't specifically cover in class (e.g. support vector machines).  Anything that can take a set of input training data and learn how to predict an output class.\n",
    "\n",
    "You can even use binary classifiers if you want, first separating (1,2) from (3,4) and then classifying each of those in a second step.\n",
    "\n",
    "It should be noted that we don't expect you to be able to do a great job separating the E and S0 galaxies from each other. So don't feel too bad if you aren't getting great results on that part of the classification. However, we think you should be able to do a decent job separating the other types from each other."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Classifiers tested:**\n",
    "* Logistic Regression\n",
    "* LDA\n",
    "* QDA\n",
    "* AdaBoost\n",
    "* Random Forest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Out of all these models, random forest produced the most accurate results. All of them were very computationally efficient."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-b45ddbff6ace394f",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2063 entries, 0 to 2062\n",
      "Data columns (total 14 columns):\n",
      "id                2063 non-null int64\n",
      "gal_type          2063 non-null int64\n",
      "ra                2063 non-null float64\n",
      "dec               2063 non-null float64\n",
      "redshift          2063 non-null float64\n",
      "log_luminosity    2063 non-null float64\n",
      "color             2063 non-null float64\n",
      "radius            2063 non-null float64\n",
      "b_over_a          2063 non-null float64\n",
      "pos_angle         2063 non-null float64\n",
      "bulge_fract       2063 non-null float64\n",
      "sersic_n          2063 non-null float64\n",
      "r_bulge           2063 non-null float64\n",
      "r_disk            2063 non-null float64\n",
      "dtypes: float64(12), int64(2)\n",
      "memory usage: 225.7 KB\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Read in the catalog data\n",
    "with open('training_galaxies.dat') as f:\n",
    "    names = f.readline().rstrip().strip(\"#\").split()\n",
    "    df = pd.read_csv(f, sep=r'\\s+', names=names)\n",
    "df.info()\n",
    "\n",
    "# Pull out the target column from the rest.\n",
    "gal_type = df['gal_type']\n",
    "df = df.drop('gal_type', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "def train_classifier(gal_type, data):\n",
    "    \"\"\"Do some kind of training to learn how to predict the galaxy type from the given training data.\n",
    "    \n",
    "    Returns the trained classifier.\n",
    "    \"\"\"\n",
    "    \n",
    "    regr = RandomForestClassifier(criterion='entropy', random_state=1234)\n",
    "    #regr = AdaBoostClassifier(random_state=1234)\n",
    "    regr.fit(data, gal_type)\n",
    "    \n",
    "    return regr\n",
    "\n",
    "def classifier_predict(classifier, data):\n",
    "    \"\"\"Use the output from the above function to predict the galaxy type for some other validation data.\n",
    "    \n",
    "    Returns predictions for the galaxy type of these galaxies.\n",
    "    \"\"\"\n",
    "    \n",
    "    return classifier.predict(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-163a1dd955051e2c",
     "locked": false,
     "points": 10,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num correct =  767\n",
      "Num total =  1032\n",
      "Fraction correct =  0.7432170542635659\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Select half the data for training, half for validation.\n",
    "# Note: Feel free to change this if you want.  For testing your answer, we will run your code with this full\n",
    "#       data set as the training data, and different (not provided) data for testing the accuracy.\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(df, gal_type, test_size = 0.5, random_state=1234)\n",
    "\n",
    "# Make some kind of classifier and train it\n",
    "classifier = train_classifier(Y_train, X_train)\n",
    "\n",
    "# Use it to predict the types for the test galaxies.\n",
    "Y_pred = classifier_predict(classifier, X_test)\n",
    "\n",
    "print('Num correct = ',np.sum(Y_pred == Y_test))\n",
    "print('Num total = ',len(Y_test))\n",
    "print('Fraction correct = ',np.sum(Y_pred == Y_test) / len(Y_test))\n",
    "# Note: It may be helpful to construct a confusion matrix to better quantify how well you are doing here, rather\n",
    "# than just looking at the overal fraction correct.  Feel free to add whatever output you want (including plots)\n",
    "# to help you better understand your results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\fjfar\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:72: FutureWarning: Pass display_labels=[1, 2, 3, 4] as keyword args. From version 1.0 (renaming of 0.25) passing these as positional arguments will result in an error\n",
      "  \"will result in an error\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "def plot_conf_matrix(Y_true, Y_pred):\n",
    "    conf = confusion_matrix(Y_true, Y_pred, labels=[1,2,3,4], normalize='true')\n",
    "    disp = ConfusionMatrixDisplay(conf, [1,2,3,4])\n",
    "    disp.plot()\n",
    "    \n",
    "plot_conf_matrix(Y_test, Y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-8f1929bee54f6e98",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "### Part 2\n",
    "\n",
    "This time, we will still use the catalog information for prediction.  But you should now use some kind of dense neural network as a classifier.  Try different choices of architecture, activation functions, etc."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Hyperparameters tuned:**\n",
    "* **Dense Layers and Nodes:** Models with 1 to 4 dense layers were tested, each with 4 to 512 nodes per layer in powers of 2. It was initially found that two dense layers with 4 nodes each performed the best, and fine-tuning around that model revealed that a 6-node layer followed by a 4-node layer produced the best results.\n",
    "* **Dropout layers:** For more complex models, dropout layers were added to mitigate overfitting. Dropout rates were varied between 0.005 and 0.3, as were the number and positioning of dropout layers. It was found that dropout layers were not as effective at preventing overfitting than just using a simpler architecture. \n",
    "* **Learning Rate:** The learning rate was varied between 0.0005 and 0.1. A learning rate of 0.01 seemed to be the best. \n",
    "* **ReduceLROnPlateau:** Surprisingly, it was found that the model performed better when ReduceLROnPlateau was not used as a callback function. \n",
    "* **Batch size:** Batch sizes between 50 and 100000 were tested. In the end, I chose a similar ratio of batch size to number of datapoints as the final homework and fine tuned from there. A batch size of 150 seemed to work the best. \n",
    "* **Number of epochs:** The number of epochs was selected visually based on how long it took the model to converge. More complicated models generally required 300 epochs, whereas this model only seemed to need 200. \n",
    "* **Batch normalization:** Various placements of BatchNormalization layers were tested. I found that putting them in every spot possible produced the most accurate results. \n",
    "* **Activation functions:** A combination of ReLU, tanh, sigmoid, and softmax acitvation functions were tried. Using ReLU for intermediate dense layers and softmax for the output layer was by far the most desirable, so not too much time was spent playing with activation functions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import clear_output\n",
    "from keras.callbacks import Callback  # Change this to tensorflow.keras if you want.\n",
    "\n",
    "class PlotLosses(Callback):\n",
    "    def __init__(self):\n",
    "        self.i = 0\n",
    "        self.x = []\n",
    "        self.losses = []\n",
    "        self.val_losses = []\n",
    "        self.acc = []\n",
    "        self.val_acc = []        \n",
    "        self.logs = []\n",
    "\n",
    "    def on_epoch_end(self, epoch, logs={}):\n",
    "        \n",
    "        self.logs.append(logs)\n",
    "        self.x.append(self.i)\n",
    "        self.losses.append(logs.get('loss'))\n",
    "        self.val_losses.append(logs.get('val_loss'))\n",
    "        \n",
    "        self.acc.append(logs.get('accuracy'))\n",
    "        self.val_acc.append(logs.get('val_accuracy'))\n",
    "        self.i += 1\n",
    "        \n",
    "        clear_output(wait=True)\n",
    "        fig, axes = plt.subplots(1,2,figsize=(8,3))\n",
    "        \n",
    "        axes[0].plot(self.x, self.losses, label=\"Train loss\")\n",
    "        axes[0].plot(self.x, self.val_losses, label=\"Validation loss\")\n",
    "        #axes[0].set_yscale('log')\n",
    "        axes[0].set_xlabel('Number of epochs')\n",
    "        axes[0].set_ylabel('Losses')\n",
    "        axes[0].legend()\n",
    "            \n",
    "        axes[1].plot(self.x, self.acc, label=\"Train accuracy\")\n",
    "        axes[1].plot(self.x, self.val_acc, label=\"Validation accuracy\")\n",
    "        axes[1].set_xlabel('Number of epochs')\n",
    "        axes[1].set_ylabel('Accuracy')\n",
    "        axes[1].legend()\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-1374e1fd4ff938d4",
     "locked": false,
     "points": 10,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# Put whatever keras or tensorflow imports you need here.\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, BatchNormalization, Activation\n",
    "from keras.optimizers import Adam\n",
    "from keras.utils import to_categorical\n",
    "\n",
    "def train_neural_net(gal_type, data):\n",
    "    \"\"\"Do some kind of training to learn how to predict the galaxy type from the given training data.\n",
    "    \n",
    "    Returns the trained neural net\n",
    "    \"\"\"\n",
    "    # split data into training and validation\n",
    "    X_train, X_test, Y_train, Y_test = train_test_split(data, gal_type, test_size = 0.5, random_state=1234)\n",
    "    Y_train = to_categorical(Y_train-1)\n",
    "    Y_test = to_categorical(Y_test-1)\n",
    "    \n",
    "    \n",
    "    model = Sequential([BatchNormalization(input_shape=(data.shape[1],)),\n",
    "                        Dense(6, kernel_regularizer='l2'), BatchNormalization(), Activation('relu'),\n",
    "                        Dense(4, kernel_regularizer='l2'), BatchNormalization(), Activation('softmax')\n",
    "                       ])\n",
    "    \n",
    "    model.compile(optimizer=Adam(learning_rate=0.01), loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "    \n",
    "    plot_losses = PlotLosses()\n",
    "    model.fit(X_train, Y_train,\n",
    "           batch_size=150,\n",
    "           epochs=200,\n",
    "           validation_data=(X_test, Y_test),\n",
    "           verbose=1,\n",
    "           callbacks=[plot_losses],\n",
    "           )\n",
    "    \n",
    "    return model\n",
    "\n",
    "def neural_net_predict(nn, data):\n",
    "    \"\"\"Use the neural net from the above function to predict the galaxy type for some other validation data.\n",
    "    \n",
    "    Returns predictions for the galaxy type of these galaxies.\n",
    "    \"\"\"\n",
    "    # get predictions as 5d-array of floats\n",
    "    result = nn.predict(data)\n",
    "    # return to single number array\n",
    "    pred = np.argmax(result, axis=1) + 1\n",
    "\n",
    "    return pred\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num correct =  728\n",
      "Num total =  1032\n",
      "Fraction correct =  0.7054263565891473\n"
     ]
    }
   ],
   "source": [
    "# Select half the data for training, half for validation.\n",
    "# Note: Feel free to change this if you want.  For testing your answer, we will run your code with this full\n",
    "#       data set as the training data, and different (not provided) data for testing the accuracy.\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(df, gal_type, test_size = 0.5, random_state=1234)\n",
    "\n",
    "# Make some kind of classifier and train it\n",
    "nn = train_neural_net(Y_train, X_train)\n",
    "\n",
    "Y_pred = neural_net_predict(nn, X_test)\n",
    "\n",
    "print('Num correct = ',np.sum(Y_pred == Y_test))\n",
    "print('Num total = ',len(Y_test))\n",
    "print('Fraction correct = ',np.sum(Y_pred == Y_test) / len(Y_test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\fjfar\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:72: FutureWarning: Pass display_labels=[1, 2, 3, 4] as keyword args. From version 1.0 (renaming of 0.25) passing these as positional arguments will result in an error\n",
      "  \"will result in an error\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_conf_matrix(Y_test, Y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-006797bf0f7b5e7d",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "### Part 3\n",
    "\n",
    "Finally, for part 3, we will use the original image data observed by the SDSS telescope.\n",
    "\n",
    "These images are available from the SDSS image cutout server at JHU.  You can get them from there, or we have posted a zip file of the downloaded images on canvas, which you can use instead if you prefer.  \n",
    "\n",
    "For the classifier, use a convolutional neural net acting on the images.  Play around with different choices of activation, number of layers, etc. to see how well you can get it to work.\n",
    "\n",
    "Unfortunately, this data set is a little small as given for training a CNN well, but there is a trick we can do to effectively increase the size of the training (and validation) sample.  Galaxies on the sky don't know which way the camera is oriented relative to their features.  So if we rotate the galaxy by an arbitrary angle, it will still be the same type, but the image will look different.  Likewise if we flip the galaxy over.  This means we can add lots of extra images that are rotated and flipped versions of the originals to give the CNN more to work with.\n",
    "\n",
    "We have provided for you code that can take the original images and randomly rotate them and flip them to produce a larger data set for training the CNN."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Hyperparameters tuned:**\n",
    "* **Number of convolutional layers:** Everywhere between 1 and 4 convolutional layers were used. Keeping 2 seemed to work the best. \n",
    "* **Kernel size:** Kernel sizes between 2 and 8 were tried for each of the convolutional layers. Having a kernel size of 5x5 on each seemed to be the most accurate. \n",
    "* **Number of filters:** Throughout the process I maintained the strategy of doubling the number of filters for each convolutional level. For the first convolutional layer, I tried 8, 10, 16, and 32 filters. 32 performed the best.\n",
    "* **Average vs Max Pooling:** Different combinations of the number, presence, and type of pooling layers were tried. It seemed that using a Max Pooling layer after the first convolutional layer and an Average Pooling layer after the second convolutional layer produced the most accurate results. \n",
    "* **Pooling size:** At each pooling layer, the pooling size was varied between 2 and 10. It was discovered that a pooling size of 5x5 for the first layer and a pooling size of 2x2 for the second layer was the best combination. \n",
    "* **Dense Layers and Nodes:** Just like in Part 2, models with 1 to 4 dense layers were tested, each with 4 to 512 nodes per layer in powers of 2. It was found that only a single dense layer with 4 nodes was required to prouce accurate results, and the simplicity of this architecture made it especially desirable. \n",
    "* **Dropout layers:** For more complex models, dropout layers were added to mitigate overfitting. Dropout rates were varied between 0.005 and 0.3, as were the number and positioning of dropout layers. It was found that dropout layers were not as effective at preventing overfitting than just using a simpler architecture.\n",
    "* **Learning Rate:** The learning rate was varied between 0.0005 and 0.02. A learning rate of 0.0007 seemed to be the best.\n",
    "* **ReduceLROnPlateau:** Once again, I was surprised to discover that leaving out the ReduceLROnPlateau callback produced more accurate results. \n",
    "* **Batch size:** Batch sizes of 16, 32, 64, 1000, and 10000 were tested. Unlike Part 2, the batch size seemed to have a minimal effect on the performance of the CNN. Thus, the default batch size of 32 was chosen. \n",
    "* **Number of epochs:** Based on the loss and accuracy plots, it seemed this model needed 50 epochs to converge. \n",
    "* **Batch normalization:** Almost every possible combination of BatchNormalization layers was tested, both in the convolutional layers and in the dense layers. Surprisingly, batch normaliztion seemed to decrease the quality of the model, except for a single normalization layer at the beginning of the convolutional network.\n",
    "* **Activation functions:** ReLU and softmax win again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The code to download the image is marked off in an `if False` block, so it won't run by default.  \n",
    "# Switch it to `if True:` to make it run if you want to get the images this way rather than from canvas.\n",
    "# You can assume the TAs will already have this downloaded when they are running your notebook, \n",
    "# so please put it back to `if False` before submitting, if you do switch it.\n",
    "\n",
    "if False:\n",
    "    \n",
    "    import urllib\n",
    "    import os\n",
    "    from io import StringIO\n",
    "    from PIL import Image\n",
    "    from tqdm.auto import tqdm, trange\n",
    " \n",
    "    def fetch_sdss_image(outfile, RA, DEC, scale=1., width=32, height=32):\n",
    "        \"\"\"Fetch the image at the given RA, DEC from the SDSS server\"\"\"\n",
    "        url = (\"http://skyservice.pha.jhu.edu/DR8/ImgCutout/getjpeg.aspx?ra=%.8f&dec=%.8f&scale=%.2f&width=%i&height=%i\" % (RA, DEC, scale, width, height))\n",
    "        im = Image.open(urllib.request.urlopen(url))\n",
    "        d = os.path.dirname(outfile)\n",
    "        if d != '' and not os.path.exists(d):\n",
    "            os.makedirs(d)\n",
    "        im.save(outfile)\n",
    "\n",
    "    for i in trange(len(df)):\n",
    "        fetch_sdss_image('images/{}/{}.jpg'.format(gal_type[i], df['id'][i]), df['ra'][i], df['dec'][i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1447 images belonging to 4 classes.\n",
      "Found 616 images belonging to 4 classes.\n"
     ]
    }
   ],
   "source": [
    "# This is the code that takes the input images and rotates/flips them to produce new images.\n",
    "# The one thing you might want to play with here, is the validation_split parameter.\n",
    "\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "train_datagen = ImageDataGenerator(\n",
    "        rescale=1./255,\n",
    "        horizontal_flip=True, vertical_flip=True, validation_split=0.3, rotation_range=360.)\n",
    "\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "    directory='images',\n",
    "    class_mode='categorical',\n",
    "    batch_size=32,\n",
    "    target_size=(32, 32),\n",
    "    subset='training'\n",
    ")\n",
    "\n",
    "val_generator = train_datagen.flow_from_directory(\n",
    "    directory='images',\n",
    "    class_mode='categorical',\n",
    "    batch_size=32,\n",
    "    target_size=(32, 32),\n",
    "    subset='validation'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-9bb2b29e0e4295a1",
     "locked": false,
     "points": 10,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "from keras.models import Model, Sequential\n",
    "from keras.layers import Input, Flatten, Conv2D, MaxPooling2D, AveragePooling2D\n",
    "\n",
    "def train_cnn(train_generator, val_generator):\n",
    "    \"\"\"Do some kind of training to learn how to predict the galaxy type from the given training images.\n",
    "    \n",
    "    Returns the trained convolutional neural net\n",
    "    \"\"\"\n",
    "    # Hint: With the generators, the fit call should look like\n",
    "    #       cnn.fit(train_generator, validation_data=val_generator, ...)\n",
    "    #       The generators already have the gal_type information encoded into the directory names.\n",
    "    #       (images/1/*, images/2/*, etc.)  So you don't need to also include the gal_type anywhere.\n",
    "    \n",
    "    x = Input(shape=(32,32,3))\n",
    "    \n",
    "    h = BatchNormalization()(x)\n",
    "    h = Conv2D(32, (5,5), padding='same', activation='relu')(h)\n",
    "    h = MaxPooling2D((5,5))(h)\n",
    "    h = Conv2D(64, (5,5), padding='same', activation='relu')(h)\n",
    "    h = AveragePooling2D((2,2))(h)\n",
    "    \n",
    "    h = Flatten()(h)\n",
    "    \n",
    "    #h = Dense(4, kernel_regularizer='l2')(h)\n",
    "    #h = Activation('relu')(h)\n",
    "    \n",
    "    h = Dense(4, kernel_regularizer='l2')(h)\n",
    "    \n",
    "    y = Activation('softmax')(h)\n",
    "    \n",
    "    model = Model(x,y)\n",
    "    \n",
    "    plot_losses = PlotLosses()\n",
    "    \n",
    "    model.compile(optimizer=Adam(learning_rate=0.0007), loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "    \n",
    "    model.summary()\n",
    "    \n",
    "    model.fit(train_generator, \n",
    "              validation_data=val_generator,\n",
    "              epochs=50, \n",
    "              callbacks=[plot_losses])\n",
    "    \n",
    "    return model\n",
    "\n",
    "def cnn_predict(cnn, images):\n",
    "    \"\"\"Use the convolutional neural net from the above function to predict the galaxy type for some validation images.\n",
    "    \n",
    "    Returns predictions for the galaxy type of these galaxies.\n",
    "    \"\"\"\n",
    "    images /= 255.\n",
    "    result = cnn.predict(images)\n",
    "    pred = np.argmax(result, axis=1) + 1\n",
    "    return pred\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num correct =  792\n",
      "Num total =  1032\n",
      "Fraction correct =  0.7674418604651163\n"
     ]
    }
   ],
   "source": [
    "from keras.preprocessing.image import load_img, img_to_array\n",
    "\n",
    "# In this case, the image generators will generate random flips of all our input images, so we will actually\n",
    "# use all the input images for training the CNN.  However, to be at least a little consistent with the\n",
    "# previous parts, we still split the data, and we'll use just half the images for testing.\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(df, gal_type, test_size = 0.5, random_state=1234)\n",
    "\n",
    "# Make some kind of classifier and train it\n",
    "cnn = train_cnn(train_generator, val_generator)\n",
    "\n",
    "test_images = np.array([img_to_array(load_img('images/{}/{}.jpg'.format(gt, ID), target_size=(32,32))) \n",
    "                        for gt,ID in zip(Y_test, X_test['id'])])\n",
    "\n",
    "Y_pred = cnn_predict(cnn, test_images)\n",
    "\n",
    "print('Num correct = ',np.sum(Y_pred == Y_test))\n",
    "print('Num total = ',len(Y_test))\n",
    "print('Fraction correct = ',np.sum(Y_pred == Y_test) / len(Y_test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\fjfar\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py:72: FutureWarning: Pass display_labels=[1, 2, 3, 4] as keyword args. From version 1.0 (renaming of 0.25) passing these as positional arguments will result in an error\n",
      "  \"will result in an error\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_conf_matrix(Y_test, Y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
